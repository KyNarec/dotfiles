import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Qt5Compat.GraphicalEffects
import Quickshell
import Quickshell.Wayland
import Quickshell.Hyprland
import "root:/modules/common"
import "root:/modules/common/widgets"
import "root:/services"

Rectangle {
    id: dockItem
    
    property string icon: ""
    property string tooltip: ""
    property bool isActive: false
    property bool showMenu: false
    property var appInfo: ({})
    property bool isPinned: false
    property int layoutIndex: parent ? parent.children.indexOf(dockItem) : 0
    property int modelIndex: index  // Get index from Repeater
    property string clickedAppClass: ""
    property int itemIndex: parent ? parent.children.indexOf(this) : 0
    property point lastClickPos: Qt.point(0, 0)  // Store the last click position
    
    signal clicked()
    signal pinApp()
    signal unpinApp()
    signal closeApp()
    
    implicitWidth: dock.dockWidth - 10
    implicitHeight: dock.dockWidth - 10
    radius: Appearance.rounding.full
    color: mouseArea.pressed ? Appearance.colors.colLayer1Active : 
           mouseArea.containsMouse ? Appearance.colors.colLayer1Hover : 
           "transparent"
    
    Behavior on color {
        ColorAnimation {
            duration: Appearance.animation.elementMoveFast.duration
            easing.type: Appearance.animation.elementMoveFast.type
        }
    }
    
    Image {
        id: iconItem
        anchors.centerIn: parent
        width: parent.width * 0.65
        height: parent.height * 0.65
        source: "image://icon/" + dockItem.icon
        sourceSize.width: width
        sourceSize.height: height
        cache: true
        asynchronous: false
        smooth: true
        antialiasing: true
        anchors.bottomMargin: 10
    }
    
    MouseArea {
        id: mouseArea
        anchors.fill: parent
        hoverEnabled: true
        acceptedButtons: Qt.LeftButton | Qt.RightButton
        
        onClicked: (mouse) => {
            if (mouse.button === Qt.LeftButton) {
                dockItem.clicked()
            } else if (mouse.button === Qt.RightButton) {
                // Store global mouse position
                lastClickPos = mouseArea.mapToGlobal(mouse.x, mouse.y)
                dockItem.showMenu = !dockItem.showMenu
            }
        }
        
        onEntered: dock.mouseOverDockItem = true
        onExited: dock.mouseOverDockItem = false
    }
    
    // Active indicator dot
    Rectangle {
        id: activeIndicator
        visible: isActive
        width: parent.width * 0.5
        height: 3
        radius: 5
        color: Appearance.colors.colOnLayer1
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.bottom: parent.bottom
        anchors.topMargin: 10
        anchors.bottomMargin: 1.5
    }
    
    ToolTip {
        id: itemTooltip
        visible: mouseArea.containsMouse && dockItem.tooltip !== ""
        text: dockItem.tooltip
        delay: 0
        timeout: 5000
        contentItem: StyledText {
            text: itemTooltip.text
            color: Appearance.colors.colOnTooltip
            horizontalAlignment: Text.AlignHCenter
        }
        
        background: Rectangle {
            color: Appearance.colors.colTooltip
            radius: Appearance.rounding.small
        }
    }

    // Menu loader
    Loader {
        active: dockItem.showMenu
        sourceComponent: PanelWindow {
            visible: dockItem.showMenu
            color: "transparent"
            implicitWidth: 200
            implicitHeight: menuContent.implicitHeight

            // Set up as a popup window
            WlrLayershell.layer: WlrLayer.Overlay
            WlrLayershell.namespace: "quickshell:dockmenu"

            // Let the window float freely
            anchors.left: false
            anchors.right: false
            anchors.top: false
            anchors.bottom: true

            margins {
                bottom: 2
                left: dockItem.lastClickPos.x - (implicitWidth / 2)  // Center menu on click position
            }

            // Click outside to close
            HyprlandFocusGrab {
                windows: [parent]
                active: parent.visible
                onCleared: () => {
                    if (!active) {
                        dockItem.showMenu = false
                    }
                }
            }

            Rectangle {
                id: menuContent
                anchors.fill: parent
                radius: Appearance.rounding.small
                color: Appearance.colors.colLayer0
                implicitHeight: menuLayout.implicitHeight + radius * 2

                DropShadow {
                    anchors.fill: parent
                    horizontalOffset: 0
                    verticalOffset: 1
                    radius: 8.0
                    samples: 17
                    color: Appearance.colors.colShadow
                    source: parent
                }

                ColumnLayout {
                    id: menuLayout
                    anchors.centerIn: parent
                    spacing: 2
                    anchors.margins: menuContent.radius

                    MenuButton {
                        Layout.fillWidth: true
                        buttonText: dockItem.isPinned ? qsTr("Unpin from dock") : qsTr("Pin to dock")
                        onClicked: {
                            if (dockItem.isPinned) {
                                dockItem.unpinApp()
                            } else {
                                dockItem.pinApp()
                            }
                            dockItem.showMenu = false
                        }
                    }

                    MenuButton {
                        Layout.fillWidth: true
                        buttonText: qsTr("Launch new instance")
                        onClicked: {
                            var command = dockItem.appInfo.command || dockItem.appInfo.class.toLowerCase()
                            Hyprland.dispatch(`exec ${command}`)
                            dockItem.showMenu = false
                        }
                    }

                    Rectangle {
                        Layout.fillWidth: true
                        Layout.preferredHeight: 1
                        color: Qt.rgba(
                            Appearance.colors.colOnLayer0.r,
                            Appearance.colors.colOnLayer0.g,
                            Appearance.colors.colOnLayer0.b,
                            0.1
                        )
                    }

                    MenuButton {
                        Layout.fillWidth: true
                        buttonText: qsTr("Move to workspace")
                        enabled: dockItem.appInfo.address !== undefined
                        onClicked: {
                            if (dockItem.appInfo.address) {
                                Hyprland.dispatch(`dispatch movetoworkspace +1 address:${dockItem.appInfo.address}`)
                            }
                            dockItem.showMenu = false
                        }
                    }

                    MenuButton {
                        Layout.fillWidth: true
                        buttonText: qsTr("Toggle floating")
                        enabled: dockItem.appInfo.address !== undefined
                        onClicked: {
                            if (dockItem.appInfo.address) {
                                Hyprland.dispatch(`dispatch togglefloating address:${dockItem.appInfo.address}`)
                            }
                            dockItem.showMenu = false
                        }
                    }

                    Rectangle {
                        Layout.fillWidth: true
                        Layout.preferredHeight: 1
                        color: Qt.rgba(
                            Appearance.colors.colOnLayer0.r,
                            Appearance.colors.colOnLayer0.g,
                            Appearance.colors.colOnLayer0.b,
                            0.1
                        )
                    }

                    MenuButton {
                        Layout.fillWidth: true
                        buttonText: qsTr("Close")
                        onClicked: {
                            if (dockItem.appInfo.address) {
                                Hyprland.dispatch(`dispatch closewindow address:${dockItem.appInfo.address}`)
                            } else if (dockItem.appInfo.pid) {
                                Hyprland.dispatch(`dispatch closewindow pid:${dockItem.appInfo.pid}`)
                            } else {
                                Hyprland.dispatch(`dispatch closewindow class:${dockItem.appInfo.class}`)
                            }
                            dockItem.closeApp()
                            dockItem.showMenu = false
                        }
                    }
                }
            }
        }
    }
} 