import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import "root:/modules/common"

Item {
    id: root
    anchors.fill: parent

    // Use WeatherForecast as a hidden data provider
    Loader {
        id: weatherLoader
        source: "../weather/WeatherForecast.qml"
        visible: false
        onLoaded: {
            if (item) {
                root.forecastData = item.forecastData
                root.locationDisplay = item.locationDisplay
                item.forecastDataChanged.connect(function() { root.forecastData = item.forecastData })
                item.locationDisplayChanged.connect(function() { root.locationDisplay = item.locationDisplay })
            }
        }
    }

    property var forecastData: []
    property string locationDisplay: ""
    property string lastUpdated: Qt.formatDateTime(new Date(), "hh:mm AP")

    // Isolated weather tab content
    ColumnLayout {
        anchors.fill: parent
        spacing: 0
        Layout.margins: 0

        // Header (always visible, not scrolled) ## is done do not touch!!
        Rectangle {
            Layout.fillWidth: true
            height: 56
            color: Appearance.colors.colLayer2
            radius: Appearance.rounding.small
            border.color: Appearance.colors.colOnLayer0
            border.width: 1
            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 8
                spacing: 2
                Text {
                    text: root.locationDisplay
                    font.pixelSize: Appearance.font.pixelSize.normal
                    color: Appearance.colors.colOnLayer1
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                    elide: Text.ElideRight
                }
                Text {
                    text: root.lastUpdated ? qsTr("Updated: ") + root.lastUpdated : ""
                    font.pixelSize: Appearance.font.pixelSize.tiny
                    color: Appearance.colors.colOnLayer1
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                    elide: Text.ElideRight
                }
            }
        }

        // Forecast cards as squares in a horizontal row
        Flickable {
            Layout.fillWidth: true
            Layout.fillHeight: true
            contentWidth: forecastGrid.width
            contentHeight: forecastGrid.height
            clip: true
            interactive: forecastGrid.width > width
            GridLayout {
                id: forecastGrid
                rows: 2
                columns: 3 // 3 on top, 3 below
                columnSpacing: 12
                rowSpacing: 12
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.margins: 20
                width: parent.width - 2 * anchors.margins
                height: 2 * ((width - 2 * forecastGrid.columnSpacing) / 3) + rowSpacing

                Repeater {
                    model: Math.min(6, root.forecastData.length)
                    delegate: Rectangle {
                        property real cardWidth: (forecastGrid.width - 2 * forecastGrid.columnSpacing) / 3
                        width: cardWidth
                        height: cardWidth
                        radius: Appearance.rounding.normal
                        color: Appearance.colors.colLayer1
                        border.color: Appearance.colors.colOnLayer0
                        border.width: 0
                        ColumnLayout {
                            anchors.fill: parent
                            anchors.margins: 12
                            spacing: 4
                            Text {
                                text: root.forecastData[index].date
                                font.pixelSize: Appearance.font.pixelSize.larger
                                font.bold: true
                                color: Appearance.colors.colOnLayer1
                                horizontalAlignment: Text.AlignHCenter
                                Layout.alignment: Qt.AlignHCenter
                                elide: Text.ElideRight
                            }
                            Text {
                                text: root.forecastData[index].emoji
                                font.pixelSize: 36
                                horizontalAlignment: Text.AlignHCenter
                                Layout.alignment: Qt.AlignHCenter
                            }
                            Text {
                                text: root.forecastData[index].temp
                                font.pixelSize: Appearance.font.pixelSize.normal
                                color: Appearance.colors.colOnLayer1
                                horizontalAlignment: Text.AlignHCenter
                                Layout.alignment: Qt.AlignHCenter
                                elide: Text.ElideRight
                            }
                            Text {
                                text: root.forecastData[index].condition
                                font.pixelSize: Appearance.font.pixelSize.tiny
                                color: Appearance.colors.colOnLayer1
                                opacity: 0.8
                                elide: Text.ElideRight
                                horizontalAlignment: Text.AlignHCenter
                                Layout.alignment: Qt.AlignHCenter
                            }
                        }
                    }
                }
                // Placeholder if no data
                Item {
                    visible: !root.forecastData || root.forecastData.length === 0
                    width: parent.width
                    height: 120
                    ColumnLayout {
                        anchors.centerIn: parent
                        spacing: 8
                        Text {
                            Layout.alignment: Qt.AlignHCenter
                            font.pixelSize: 48
                            color: Appearance.m3colors.m3outline
                            horizontalAlignment: Text.AlignHCenter
                            text: "☁️"
                        }
                        Text {
                            Layout.alignment: Qt.AlignHCenter
                            font.pixelSize: Appearance.font.pixelSize.large
                            color: Appearance.m3colors.m3outline
                            horizontalAlignment: Text.AlignHCenter
                            text: qsTr("No forecast data")
                        }
                    }
                }
            }
        }
    }
} 