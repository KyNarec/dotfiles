import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Services.UPower

RowLayout {
    id: root
    required property var shell
    
    spacing: 8
    signal performanceActionRequested(string action)
    signal mouseChanged(bool containsMouse)
    
    readonly property bool containsMouse: performanceButton.containsMouse || 
                                         balancedButton.containsMouse || 
                                         powerSaverButton.containsMouse
    
    onContainsMouseChanged: root.mouseChanged(containsMouse)
    
    opacity: visible ? 1 : 0
    
    Behavior on opacity {
        NumberAnimation {
            duration: 300
            easing.type: Easing.OutCubic
        }
    }

    // Performance Profile Button
    SystemButton {
        id: performanceButton
        Layout.fillHeight: true
        Layout.fillWidth: true
        
        shell: root.shell
        iconText: "󰓅"  // performance icon
        
        // Set active state based on current power profile
        isActive: PowerProfiles.profile === PowerProfile.Performance
        
        onClicked: {
            PowerProfiles.profile = PowerProfile.Performance
            root.performanceActionRequested("performance")
        }
        onMouseChanged: function(containsMouse) {
            if (!containsMouse && !root.containsMouse) {
                root.mouseChanged(false)
            }
        }
    }

    // Balanced Profile Button
    SystemButton {
        id: balancedButton
        Layout.fillHeight: true
        Layout.fillWidth: true
        
        shell: root.shell
        iconText: "󰾅"  // balanced icon
        
        // Set active state based on current power profile
        isActive: PowerProfiles.profile === PowerProfile.Balanced
        
        onClicked: {
            PowerProfiles.profile = PowerProfile.Balanced
            root.performanceActionRequested("balanced")
        }
        onMouseChanged: function(containsMouse) {
            if (!containsMouse && !root.containsMouse) {
                root.mouseChanged(false)
            }
        }
    }

    // Power Saver Profile Button
    SystemButton {
        id: powerSaverButton
        Layout.fillHeight: true
        Layout.fillWidth: true
        
        shell: root.shell
        iconText: "󰌪"  // power saver icon
        
        // Set active state based on current power profile
        isActive: PowerProfiles.profile === PowerProfile.PowerSaver
        
        onClicked: {
            PowerProfiles.profile = PowerProfile.PowerSaver
            root.performanceActionRequested("powersaver")
        }
        onMouseChanged: function(containsMouse) {
            if (!containsMouse && !root.containsMouse) {
                root.mouseChanged(false)
            }
        }
    }
}